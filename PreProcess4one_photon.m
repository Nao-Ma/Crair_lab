
%{
Required files are as following
    ReadImageJROI.m (from github. To open .ROI file from ImageJ ROI manager.)
    Image Processing Toolbox 
    Parallel Computing Toolbox (if you don't have, just change "parfor" >> "for")
    saveastiff.m (https://www.mathworks.com/matlabcentral/fileexchange/35684-multipage-tiff-stack)
    imread_big.m   (https://www.mathworks.com/matlabcentral/fileexchange/61376-imread_big-read-in-tiff-stacks-larger-than-4gb)
   
input:   ・8bit one-photon movies. 
　　　　　 ・ROI mask generated by ROI manager/ImageJ. Use polygon tool to draw the ROI
output:  ・32bit tif movies.
　　　　　 
%}

function XX = PreProcess4one_photon()

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%set parameter
hat = 300;               % window size for rolling hat algorithm.   300 for 10 Hz
percentile10th_flag = 1; % default = 1. whether 10th percentile baseline is used (=1) or not (=0).
number_save_file = 10;   % Number of output files. Divid output files so as to the file sizes is less than 4 Gbyte, otherwise, you can not open the files on imageJ.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

XX = 1;
A=[];

%Open a movie (.tif)
[tif_file_name, tif_path, tif_index] = uigetfile({  '*.tif','TIF (*.tif)'}, 'Select a 8bit tif file of 1p imaging.');
if isequal(tif_file_name,0) | isequal(tif_path,0)
    disp('User pressed cancel')
    A = [];
    return
end

% tif load
disp('tif loading')
tic
A = imread_big([tif_path, tif_file_name]);
toc

movie_size = size(A);
movie_WbyH = movie_size(1)*movie_size(2);

A = reshape(A, movie_WbyH, movie_size(3)); %reshape 3D array into space-time matrix             

% Opening ROI file(generated by ROI manarger/imageJ) 
[roi_file_name, roi_path, roi_index] = uigetfile({  '*.roi','ROI (*.roi)'}, 'Select a roi file generated by ROI manager imageJ.');
if isequal(roi_file_name,0) | isequal(roi_path,0)
    disp('User pressed cancel')
    A = [];
    return
end

try        
    ROI = ReadImageJROI([roi_path, roi_file_name]); 
    mask = poly2mask(ROI.mnCoordinates(:, 1), ROI.mnCoordinates(:, 2), movie_size(1), movie_size(2)); 
    mask_id = find(mask > 0);
catch
    disp('ROI file must be broken!!')
    A =[];
end
    
% Top-hat filter.  removing slow drifting trend
se = strel('line', hat, 0);  
A_sliced = A(mask_id, :); 
parfor p = 1:length(mask_id)   
    filtered1(p, :) = imtophat(A_sliced(p, :), se);
end
clear A_sliced
A_filtered = zeros(movie_WbyH, movie_size(3));
A_filtered(mask_id, :) = filtered1;
clear filtered1
A_filtered = uint8(A_filtered);
A = A - A_filtered;
mean_A = mean(A, 2);
A = [];
F = repmat(mean_A(mask_id, :), 1, movie_size(3));
clear mean_A
F = single(F);
A_filtered = single(A_filtered);
    
%   dF/Fo
A = zeros(movie_WbyH, movie_size(3));
A = single(A);
A(mask_id, :) = A_filtered(mask_id, :) ./ F;
clear F A_filtered


% 10th percentile baseline(option)
if percentile10th_flag
    disp('calculating percentile 10th.')
    tic
    percentile10th = prctile(A',10);
    toc
    A = A-percentile10th'; 
end
   
% tif save
A= reshape(A, movie_size(1),movie_size(2),movie_size(3));
disp('Tiff Saving')
options.big = false;
if number_save_file == 1
    saveastiff(A, 'preprocessed.tif', options);
elseif number_save_file == 0
    disp('number_save_file value should be changed')
else
    blocksz = movie_size(3)./number_save_file;
    first_frame = 0;
    last_frame = 0;
    for frames = 1:number_save_file    
        first_frame = 1+blocksz*(frames-1);
        last_frame = blocksz+blocksz*(frames-1);
        saveastiff(A(:,:,first_frame:last_frame), [num2str(frames), '_preprocessed.tif'], options)
    end
end
   
end

