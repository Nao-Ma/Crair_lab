
%{
  Input:   CSV.file generated by Simple Neurite Tracer (SNT)/ImageJ plugin 
ã€€
               Branch types on the SNT are defined as following:
               undefined        = stable 
               (basal) dendrite = Addition
               apical dendrite  = Elimination
               axon             = Extended
               soma             = Retracted
               others           = stable
%}
function A = CSV_Extraction()

% Slecting a CSV file generated by Simple Neurite Tracer.      
[csv_file_name, csv_path, csv_index] = uigetfile({  '*.csv','CSV (*.csv)'}, 'Select one CSV file of branch data.');
    if isequal(csv_file_name,0) | isequal(csv_path,0)
    disp('User pressed cancel')
    A = [];
    return
    end
    
   % Open CSV file which is generated by Simple Neurite Tracer.
   % X       [n,1]matrix.  pixel data of Start_X_positions of axon terminals 
   % Y       [n,1]matrix.  pixel data of Start_Y_positions of axon terminals
   % eX       [n,1]matrix.  pixel data of End_X_positions of axon terminals 
   % eY       [n,1]matrix.  pixel data of End_Y_positions of axon terminals
   % L       [n,1]matrix.  Length of changing axon terminal (pixel) 
   % Z       [n,1]matrix. type of axon arbors (others = 1, add=2, elimination=3, elongation=4, retraction=5) 
   % T       table. data of CSV file
   try
       T = readtable([csv_path, csv_file_name]);
   catch
       disp('cant open CSV file!')
   end
    
      
   %Extracting positions
   try
          X = round(T{:,'StartX'});
          Y = round(T{:,'StartY'});
          eX = round(T{:,'EndX'});
          eY = round(T{:,'EndY'});
          L = round(T{:,'PathLength'});
   catch
       disp('file seems to be broken.')
       A =[];
       return
   end
   
   %Convert SWCTypes to Numbers 
   %Tag_d      temporl data of SWCType. This must be Cell_array.  
   try
       Tag_d = T{:,'SWCType'};
   catch
       disp('file seems to be broken.')
       A =[];
       return
   end
   
   Z = [];
   for frame = 1:length(Tag_d)
       switch Tag_d{frame}
           case 'undefined'            % branch 
                 Z(frame, 1) = 1; 
           case '(basal) dendrite'     % Addition
                 Z(frame, 1) = 2;
           case 'apical dendrite'      % Elimination
                 Z(frame, 1) = 3;
           case 'axon'                 % EXtend
                 Z(frame, 1) = 4;
           case 'soma'                 % retract
                 Z(frame, 1) = 5;
           otherwise                   % others = branch
                 Z(frame, 1) = 1;
       end
   end
   %Extracted data    [type, x_position, y_position, end_x_position, end_y_position, PathLength]
   A =[Z,X,Y,eX,eY,L];